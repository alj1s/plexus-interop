import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "com.github.hierynomus.license" version"0.14.0"
    id "de.undercouch.download" version "3.2.0"
}

def dotnetSdkVersion = "2.1.300"
def buildCache = System.getenv("PLEXUS_BUILD_CACHE_DIR") ?: new File("${rootDir}/build").absolutePath
def fullDotNetBuild = System.env['PLEXUS_BUILD_FULL_DOTNET'] == 'true' && Os.isFamily(Os.FAMILY_WINDOWS)
def testsEnabled = Os.isFamily(Os.FAMILY_WINDOWS) && System.env['BuildRunner'] != "MyGet" && System.env['PLEXUS_BUILD_SKIP_DOTNET_TESTS'] != 'true'
def nugetVersion = System.getenv("PLEXUS_BUILD_NUGET_VERSION") ?: System.getenv("APPVEYOR_REPO_TAG_NAME")
def dotnetParams = nugetVersion == null ? " " : "/p:Version=$nugetVersion"
if (!fullDotNetBuild) {
    dotnetParams += " /p:CORE_ONLY=true"
}

license {
    header file("${rootDir}/LICENSE_HEADER")
    mapping {
        cs='JAVADOC_STYLE'
        proto='DOUBLESLASH_STYLE'
        interop='DOUBLESLASH_STYLE'
    }
    strictCheck true
}

task licenseFormatCS(type: com.hierynomus.gradle.license.tasks.LicenseFormat) {
    source = fileTree(dir: 'src').exclude("**/bin/*").exclude("**/obj/*")
            .exclude("**/google/protobuf/*.proto")
            .include("**/*.cs").include("**/*.proto").include("**/*.interop")
}

tasks["license"].dependsOn licenseFormatCS
licenseFormat.dependsOn licenseFormatCS

task prepareDotnet {
    doLast {

        println "Full dotnet: $fullDotNetBuild"
	println "Tests enabled: $testsEnabled"

        def dotnetVersion = new ByteArrayOutputStream()
        exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$projectDir/dotnet.cmd", "--version"
            } else {
                commandLine "$projectDir/dotnet.sh", "--version"
            }
            standardOutput = dotnetVersion;
        }
        dotnetVersion = "$dotnetVersion".trim()

        if (dotnetVersion == dotnetSdkVersion) {
            println "Dotnet SDK $dotnetSdkVersion is already installed, skipping downloading"
        } else {
            println "Dotnet SDK $dotnetSdkVersion is not installed on the current machine. Downloading it to $buildCache."

            download {
                onlyIfNewer true
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    src 'https://download.microsoft.com/download/8/8/5/88544F33-836A-49A5-8B67-451C24709A8F/dotnet-sdk-2.1.300-win-x86.zip'
                    dest "$buildCache/win32/sdk/dotnet.zip"
                } else if (Os.isFamily(Os.FAMILY_MAC)){
                    src 'https://download.microsoft.com/download/8/8/5/88544F33-836A-49A5-8B67-451C24709A8F/dotnet-sdk-2.1.300-osx-x64.tar.gz'
                    dest "$buildCache/unix/sdk/dotnet.tar.gz"
                } else {
                    src 'https://download.microsoft.com/download/8/8/5/88544F33-836A-49A5-8B67-451C24709A8F/dotnet-sdk-2.1.300-linux-x64.tar.gz'
                    dest "$buildCache/unix/sdk/dotnet.tar.gz"
                }
            }

            copy {
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    from zipTree("$buildCache/win32/sdk/dotnet.zip")
                    into "$buildCache/win32/sdk/dotnet"
                } else {
                    from tarTree(resources.gzip("$buildCache/unix/sdk/dotnet.tar.gz"))
                    into "$buildCache/unix/sdk/dotnet"
                }
            }

            tasks.withType(Exec) {
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    environment "PATH", "$buildCache/win32/sdk/dotnet/"
                    environment "PLEXUS_BUILD_DOTNET_DIR", "$buildCache/win32/sdk/dotnet/"
                } else {
                    environment "PATH", "/usr/local/bin:/bin:/usr/bin:$buildCache/unix/sdk/dotnet/"
                    environment "PLEXUS_BUILD_DOTNET_DIR", "$buildCache/unix/sdk/dotnet/"
                }
	        }
        }
    }
}

task compile(type:Exec) {
    dependsOn 'license' 
    dependsOn prepareDotnet
    dependsOn ':web:buildStudio'
    
    workingDir projectDir
    environment "PLEXUS_BUILD_DOTNET_PARAMS", dotnetParams
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine "$projectDir/build.cmd"
    } else {
        commandLine "$projectDir/build.sh"
    }
}

if (testsEnabled) {
    task test(dependsOn: compile, type:Exec) {
        dependsOn prepareDotnet
        workingDir projectDir
    	ignoreExitValue false
        environment "PLEXUS_BUILD_DOTNET_PARAMS", dotnetParams
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
           commandLine "$projectDir/tests.cmd"
        } else {
           // For now tests can only run on Windows
           // commandLine "$projectDir/tests.sh"
        }
    }
} else {
    task test(dependsOn: compile) {
        doLast {
            println "Skipping tests because current platform is not Windows or running in MyGet"
        }
    }
}

if (nugetVersion != null) {
    task push(dependsOn: test, type:Exec) {
        dependsOn prepareDotnet
        workingDir projectDir
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine "$projectDir/push.cmd"
        } else {
            commandLine "$projectDir/push.sh"
        }
    }    
} else {
   task push(dependsOn: test) {
        doLast {
            println "Skipping push because nuget version is not specified"
        }
    }
}

task clean {
    delete fileTree(dir: 'src').include("**/bin/*").include("**/obj/*")
}

task build (dependsOn: [compile, test, push]) {}