import { BaseClientApiBuilder, MethodInvocationContext, Completion, ClientConnectRequest, StreamingInvocationClient, GenericClientApi, InvocationRequestInfo, InvocationClient, GenericRequest, GenericClientApiBase } from '@plexus-interop/client';
import { ProvidedMethodReference, ServiceDiscoveryRequest, ServiceDiscoveryResponse, MethodDiscoveryRequest, MethodDiscoveryResponse, GenericClientApiBuilder, ValueHandler } from '@plexus-interop/client';
import { TransportConnection, UniqueId } from '@plexus-interop/transport-common';
import { Arrays, Observer } from '@plexus-interop/common';
import { InvocationObserver, InvocationObserverConverter, ContainerAwareClientAPIBuilder } from '@plexus-interop/client';

import * as plexus from './plexus-messages';

/**
 *  Proxy interface of ExampleService service, to be consumed by Client API
 */
export abstract class ExampleServiceProxy {

    public abstract pointToPoint(request: plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest): Promise<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>;

    public abstract serverStreaming(request: plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest, responseObserver: InvocationObserver<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>): Promise<InvocationClient>;

    public abstract clientToServer(responseObserver: InvocationObserver<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>): Promise<StreamingInvocationClient<plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest>>;

    public abstract bidiStreaming(responseObserver: InvocationObserver<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>): Promise<StreamingInvocationClient<plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest>>;

}

/**
 *  Proxy interface of NoLaunchExampleService service, to be consumed by Client API
 */
export abstract class NoLaunchExampleServiceProxy {

    public abstract pointToPoint(request: plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest): Promise<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>;

}

/**
 *  Internal Proxy implementation for ExampleService service
 */
export class ExampleServiceProxyImpl implements ExampleServiceProxy {

    constructor(private readonly genericClient: GenericClientApi) { }

    public pointToPoint(request: plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest): Promise<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse> {
        const invocationInfo: InvocationRequestInfo = {
            methodId: 'PointToPoint',
            serviceId: 'com.db.plexus.interop.dsl.gen.test.services.ExampleService'
        };
        return new Promise((resolve, reject) => {
            this.genericClient.sendUnaryRequest(invocationInfo, request, {
                value: responsePayload => resolve(responsePayload),
                error: e => reject(e)
            }, plexus.com.db.plexus.interop.dsl.gen.test.model.Request, plexus.com.db.plexus.interop.dsl.gen.test.model.Response);
        });
    }

    public serverStreaming(request: plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest, responseObserver: InvocationObserver<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>): Promise<InvocationClient> {
        const invocationInfo: InvocationRequestInfo = {
            methodId: 'ServerStreaming',
            serviceId: 'com.db.plexus.interop.dsl.gen.test.services.ExampleService'
        };
        return this.genericClient.sendServerStreamingRequest(
            invocationInfo,
            request,
            responseObserver,
            plexus.com.db.plexus.interop.dsl.gen.test.model.Request, plexus.com.db.plexus.interop.dsl.gen.test.model.Response
        );
    }

    public clientToServer(responseObserver: InvocationObserver<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>): Promise<StreamingInvocationClient<plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest>> {
        const invocationInfo: InvocationRequestInfo = {
            methodId: 'ClientToServer',
            serviceId: 'com.db.plexus.interop.dsl.gen.test.services.ExampleService'
        };
        return this.genericClient.sendBidirectionalStreamingRequest(
            invocationInfo,
            responseObserver,
            plexus.com.db.plexus.interop.dsl.gen.test.model.Request, plexus.com.db.plexus.interop.dsl.gen.test.model.Response);
    }

    public bidiStreaming(responseObserver: InvocationObserver<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>): Promise<StreamingInvocationClient<plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest>> {
        const invocationInfo: InvocationRequestInfo = {
            methodId: 'BidiStreaming',
            serviceId: 'com.db.plexus.interop.dsl.gen.test.services.ExampleService'
        };
        return this.genericClient.sendBidirectionalStreamingRequest(
            invocationInfo,
            responseObserver,
            plexus.com.db.plexus.interop.dsl.gen.test.model.Request, plexus.com.db.plexus.interop.dsl.gen.test.model.Response);
    }

}

/**
 *  Internal Proxy implementation for NoLaunchExampleService service
 */
export class NoLaunchExampleServiceProxyImpl implements NoLaunchExampleServiceProxy {

    constructor(private readonly genericClient: GenericClientApi) { }

    public pointToPoint(request: plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest): Promise<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse> {
        const invocationInfo: InvocationRequestInfo = {
            methodId: 'PointToPoint',
            serviceId: 'com.db.plexus.interop.dsl.gen.test.services.ExampleService',
            serviceAlias: 'NoLaunchExampleService'
        };
        return new Promise((resolve, reject) => {
            this.genericClient.sendUnaryRequest(invocationInfo, request, {
                value: responsePayload => resolve(responsePayload),
                error: e => reject(e)
            }, plexus.com.db.plexus.interop.dsl.gen.test.model.Request, plexus.com.db.plexus.interop.dsl.gen.test.model.Response);
        });
    }

}

/**
 * Main client API
 */
export interface ComponentAClient extends GenericClientApi  {

    getExampleServiceProxy(): ExampleServiceProxy;

    getNoLaunchExampleServiceProxy(): NoLaunchExampleServiceProxy;

}

/**
 * Client's API internal implementation
 */
class ComponentAClientImpl extends GenericClientApiBase implements ComponentAClient {

    public constructor(
        private readonly genericClient: GenericClientApi,
        private readonly exampleServiceProxy: ExampleServiceProxy,
        private readonly noLaunchExampleServiceProxy: NoLaunchExampleServiceProxy
    ) {
        super(genericClient);
    }

    public getExampleServiceProxy(): ExampleServiceProxy {
        return this.exampleServiceProxy;
    }

    public getNoLaunchExampleServiceProxy(): NoLaunchExampleServiceProxy {
        return this.noLaunchExampleServiceProxy;
    }

}

/**
 * Client invocation handler for NoLaunchExampleService, to be implemented by Client
 */
export abstract class NoLaunchExampleServiceInvocationHandler {

    public abstract onPointToPoint(invocationContext: MethodInvocationContext, request: plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest): Promise<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>;
}

/**
 * Client invocation handler for ExampleService, to be implemented by Client
 */
export abstract class ExampleServiceInvocationHandler {

    public abstract onPointToPoint(invocationContext: MethodInvocationContext, request: plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest): Promise<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>;

    public abstract onServerStreaming(invocationContext: MethodInvocationContext, request: plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest, hostClient: StreamingInvocationClient<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>): void;

    public abstract onClientToServer(invocationContext: MethodInvocationContext, hostClient: StreamingInvocationClient<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>): InvocationObserver<plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest>;

    public abstract onBidiStreaming(invocationContext: MethodInvocationContext, hostClient: StreamingInvocationClient<plexus.com.db.plexus.interop.dsl.gen.test.model.IResponse>): InvocationObserver<plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest>;
}

/**
 * Client API builder
 */
export class EchoServerClientBuilder extends BaseClientApiBuilder<ComponentAClient> {

    public constructor() {
        super(new ContainerAwareClientAPIBuilder().withApplicationId('com.db.plexus.interop.dsl.gen.test.components.ComponentA'));
    }

    private noLaunchExampleServiceHandler: NoLaunchExampleServiceInvocationHandler;

    private exampleServiceHandler: ExampleServiceInvocationHandler;

    public withNoLaunchExampleServiceInvocationsHandler(invocationsHandler: NoLaunchExampleServiceInvocationHandler): ComponentAClientBuilder {
        this.noLaunchExampleServiceHandler = invocationsHandler;
        return this;
    }

    public withExampleServiceInvocationsHandler(invocationsHandler: ExampleServiceInvocationHandler): ComponentAClientBuilder {
        this.exampleServiceHandler = invocationsHandler;
        return this;
    }

    public connect(): Promise<ComponentAClient> {
        if (!this.noLaunchExampleServiceHandler) {
            return Promise.reject('Invocation handler for NoLaunchExampleService is not provided');
        }
        if (!this.exampleServiceHandler) {
            return Promise.reject('Invocation handler for ExampleService is not provided');
        }
        return this.genericBuilder
            .withTypeAwareUnaryHandler({
                serviceInfo: {
                    serviceId: 'com.db.plexus.interop.dsl.gen.test.services.ExampleService',
                    serviceAlias: 'NoLaunchExampleService'
                },
                methodId: 'PointToPoint',
                handle: this.noLaunchExampleServiceHandler.onPointToPoint.bind(this.noLaunchExampleServiceHandler)
            }, plexus.com.db.plexus.interop.dsl.gen.test.model.Request, plexus.com.db.plexus.interop.dsl.gen.test.model.Response)
            .withTypeAwareUnaryHandler({
                serviceInfo: {
                    serviceId: 'com.db.plexus.interop.dsl.gen.test.services.ExampleService'
                },
                methodId: 'PointToPoint',
                handle: this.exampleServiceHandler.onPointToPoint.bind(this.exampleServiceHandler)
            }, plexus.com.db.plexus.interop.dsl.gen.test.model.Request, plexus.com.db.plexus.interop.dsl.gen.test.model.Response)
            .withTypeAwareServerStreamingHandler({
                serviceInfo: {
                    serviceId: 'com.db.plexus.interop.dsl.gen.test.services.ExampleService'
                },
                methodId: 'ServerStreaming',
                handle: this.exampleServiceHandler.onServerStreaming.bind(this.exampleServiceHandler)
            }, plexus.com.db.plexus.interop.dsl.gen.test.model.Request, plexus.com.db.plexus.interop.dsl.gen.test.model.Response)
            .withTypeAwareBidiStreamingHandler({
                serviceInfo: {
                    serviceId: 'com.db.plexus.interop.dsl.gen.test.services.ExampleService'
                },
                methodId: 'ClientToServer',
                handle: this.exampleServiceHandler.onClientToServer.bind(this.exampleServiceHandler)
            }, plexus.com.db.plexus.interop.dsl.gen.test.model.Request, plexus.com.db.plexus.interop.dsl.gen.test.model.Response)
            .withTypeAwareBidiStreamingHandler({
                serviceInfo: {
                    serviceId: 'com.db.plexus.interop.dsl.gen.test.services.ExampleService'
                },
                methodId: 'BidiStreaming',
                handle: this.exampleServiceHandler.onBidiStreaming.bind(this.exampleServiceHandler)
            }, plexus.com.db.plexus.interop.dsl.gen.test.model.Request, plexus.com.db.plexus.interop.dsl.gen.test.model.Response)
            .connect()
            .then(genericClient => new ComponentAClientImpl(
                genericClient,
                new ExampleServiceProxyImpl(genericClient),
                                new NoLaunchExampleServiceProxyImpl(genericClient)
                ));
    }
}
