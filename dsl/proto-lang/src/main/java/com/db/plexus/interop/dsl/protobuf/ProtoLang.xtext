/**
 * Copyright 2017-2019 Plexus Interop Deutsche Bank AG
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
grammar com.db.plexus.interop.dsl.protobuf.ProtoLang with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.db.com/plexus/interop/dsl/protobuf"

Proto: {Proto} 
	-> 'syntax' '=' syntax=ProtoSyntax ';'+
	elements+=ProtoElement*
;

enum ProtoSyntax:
	Proto2 = '"proto2"' | Proto2 = '\'proto2\'' |
	Proto3 = '"proto3"' | Proto3 = '\'proto3\''
;

Package: 
	 -> 'package' importedNamespace=FULL_ID ';'+
;

ProtoElement:
	(-> Package | -> Import | -> Extend | -> Option | ProtoDefinition)
;

Import: 
	 'import' ( -> modifier=ImportModifier)? importURI=STRING ';'+
;

enum ImportModifier:	
	Public = 'public' |
	Weak = 'weak'
;

Option:
	(-> CustomOption | PredefinedOption)
;

PredefinedOption returns Option: 
	'option' descriptor=[Field|SHORT_ID] '=' value=Constant ';'+
;

CustomOption returns Option:
	'option' (-> isCustom?='(') descriptor=[Field|FULL_ID] ')' '=' value=Constant ';'+
;

Constant:
	(-> StringConstant | -> BoolConstant | EnumConstant | IntConstant | DecimalConstant)
;

StringConstant:
	value=STRING
;

IntConstant:
	value=SIGNED_INT
;

BoolConstant:
	value=BOOL
;

DecimalConstant:
	value=DECIMAL
;

EnumConstant:
	value=[EnumValue|FULL_ID]
;

Extend:
	'extend' message=[Message|FULL_ID] '{' 
	 	(elements+=ExtendElement)* 
	'}' ';'*
;

ExtendElement:
	(-> Group | Field) 
;

ProtoDefinition:
	(-> Message | -> Enum | -> Service)
;

Enum: 
	'enum' name=SHORT_ID '{'
		elements+=EnumElement*
	'}' ';'*
;

EnumElement:
	(-> Option | EnumValue)
;

EnumValue:
	name=SHORT_ID '=' value=INT ('[' options+=OptionListItem (','  options+=OptionListItem)* ']')? ';'+
;

OptionListItem returns Option: 
	(-> CustomOptionItem | PredefinedOptionItem)
;

PredefinedOptionItem returns Option:
	descriptor=[Field|SHORT_ID] -> '=' value=Constant
;

CustomOptionItem returns Option:
	isCustom?='(' descriptor=[Field|FULL_ID] ')' -> '=' value=Constant
;

Message: 
	'message' name=SHORT_ID '{'
		elements+=MessageElement*
	'}' ';'*
;

MessageElement:
	-> Enum | -> Message | -> OneOf | -> MapField | -> Reserved | 
	-> Extensions | -> Group | -> Option | Field
;

Field:
	(-> label=FieldLabel)? typeReference=FieldTypeReference name=SHORT_ID '=' number=INT 
	(('[' elements+=FieldElement (','  elements+=FieldElement)* ']'))? ';'+
;

FieldElement:
	( -> DefaultFieldValue | OptionListItem)
;

DefaultFieldValue:
	'default' '=' value=Constant
;

Group:
	(-> label=FieldLabel)? name=SHORT_ID '=' number=INT '{'
		elements+=MessageElement*
	'}' ';'*
;

enum FieldLabel:
	Required = 'required' |
	Optional = 'optional' |
	Repeated = 'repeated'
;

FieldTypeReference:
	(-> PrimitiveFieldType | ComplexFieldType)
;

PrimitiveFieldType:
	value=PrimitiveType
;

ComplexFieldType:
	value=[ComplexType|FULL_ID]
;

OneOf: 
	'oneof' name=SHORT_ID '{' (fields+=OneOfField)* '}' ';'*
;

OneOfField returns Field:
	typeReference=FieldTypeReference name=SHORT_ID '=' number=INT 
	(('[' elements+=FieldElement (','  elements+=FieldElement)* ']'))? ';'+
;

MapField: 
	'map' '<' keyType=MapKeyType ',' valueType=FieldTypeReference '>' name=SHORT_ID '=' number=INT 
	 (('[' options+=OptionListItem (','  options+=OptionListItem)* ']'))? ';'+
;

Reserved: 
	'reserved' fields=ReservedFields ';'+
;

ReservedFields:
	FieldNames | FieldRanges
;

FieldNames: {FieldNames}
	elements+=STRING (',' elements+=STRING)*
;

FieldRanges: {FieldRanges}
	elements+=FieldRange (',' elements+=FieldRange)*
;

FieldRange:
	from=INT (-> 'to' (to=INT | -> toUnbounded?='max'))?
;

Extensions:
	'extensions' fields=FieldRanges ';'+
;

Service: 
	'service' name=SHORT_ID '{'		
		elements+=ServiceElement*
	'}' ';'*
;

ServiceElement: 
	-> Option | Method
;

Method: 
	'rpc' name=SHORT_ID request=MethodData 'returns' response=MethodData 
	('{' elements+=MethodElement* '}' | ';') ';'*
;

MethodData:
	'(' ( -> isStream?='stream')? message=[Message|FULL_ID] ')'
;

MethodElement:
	Option
;

enum PrimitiveType:
	DOUBLE	='double'	|
	FLOAT	='float' 	|
	INT32	='int32' 	|
	INT64	='int64'	|
	UINT32	='uint32' 	|
	UINT64	='uint64' 	|
	SINT32	='sint32' 	|
	SINT64	='sint64' 	|
	FIXED32	='fixed32' 	|
	FIXED64	='fixed64' 	|
	SFIXED32='sfixed32' |
	SFIXED64='sfixed64' |
	BOOl	='bool' 	|
	STRING	='string' 	|
	BYTES	='bytes'
;

enum MapKeyType returns PrimitiveType:
	INT32	='int32' 	|
	INT64	='int64'	|
	UINT32	='uint32' 	|
	UINT64	='uint64' 	|
	SINT32	='sint32' 	|
	SINT64	='sint64' 	|
	FIXED32	='fixed32' 	|
	FIXED64	='fixed64' 	|
	SFIXED32='sfixed32' |
	SFIXED64='sfixed64' |
	BOOl	='bool' 	|
	STRING	='string'
;

BOOL returns ecore::EBoolean: 	
	'true' | 'false'
;

DECIMAL returns ecore::EDouble: 
	SIGNED_INT'.'INT
;

SIGNED_INT returns ecore::EInt: 
	'-'?INT
;

PROTO_LANG_KEYWORD:
	'package' | 'syntax' | 'message' | 'rpc' | 'service' | 'max' | 'oneof' | 'map' | 'extensions' | 'stream' | 'reserved' | 
	  'required' | 'optional' | 'repeated' | 'enum' | 'extend' | 'option' | 'public' | 'weak' | 'import' | 'true' | 'false' | 'default'
;

PROTO_TYPE_KEYWORD:
	'double' |   'float' |   'int32' |   'int64' |   'uint32' |   'uint64' |   'sint32' |   'sint64' |   'fixed32' |   'fixed64' |   'sfixed32' | 
	  'sfixed64' |   'bool' |   'string' |   'bytes'
;

FULL_ID:
	'.'? SHORT_ID ('.' SHORT_ID)*
;

SHORT_ID:
	 PROTO_LANG_KEYWORD | PROTO_TYPE_KEYWORD | ID	 
;

@Override 
terminal ID : 
	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
;